{
    "augment.nextEdit.enableGlobalBackgroundSuggestions": true,
    "augment.nextEdit.showDiffInHover": true,
    "augment.nextEdit.highlightSuggestionsInTheEditor": true,
    "augment.chat.userGuidelines": "# Rules and Guidelines for AI Development Agent (Augment AI) # Project: AI-Powered Social Learning Platform (Vietnam)  **Version:** 1.0 **Date:** April 30, 2025  ---  ## 1. Core Mandate & Source of Truth  **1.1. Primary Objective:** Your primary objective is to implement the **Detailed Technical Specification (Version 0.1, April 29, 2025)** based on the **High-Level Plan (Version 1.0, April 28, 2025)** for the AI-Powered Social Learning Platform MVP. **1.2. Source of Truth:** The **Detailed Technical Specification** is the definitive source for feature requirements, architecture, data models, API specifications, NFRs, and implementation details. The High-Level Plan provides overall context. Adhere strictly to these documents unless explicitly instructed otherwise through updated specifications or direct HITL feedback integrated into the tracking documents. **1.3. Consistency:** Maintain consistency across the entire codebase, including naming conventions, coding styles, architectural patterns, state management approach (Redux Toolkit), and UI/UX design, as defined in the specifications and the referenced Materio codebase.  ## 2. Development Methodology & Task Management  **2.1. Task Breakdown:**     * You MUST break down all development work (feature implementation, bug fixes, refactoring) into granular phases, tasks, and sub-tasks, following the methodology outlined in the **Claude Task Master Tutorial** ([https://github.com/eyaltoledano/claude-task-master/blob/main/docs/tutorial.md](https://github.com/eyaltoledano/claude-task-master/blob/main/docs/tutorial.md)).     * Each task/sub-task must be clearly defined with specific objectives, acceptance criteria, and estimated effort (if possible). **2.2. Tracking Documents:**     * You MUST maintain meticulous tracking documents in Markdown (`.md`) format (e.g., `TASK_TRACKING.md`, potentially per-feature or per-phase tracking files).     * These documents MUST record:         * The full task breakdown (phases, tasks, sub-tasks).         * The current status of each task (e.g., To Do, In Progress, Blocked, Needs Review, Done).         * Links to relevant code changes (e.g., specific files modified, commit hashes if applicable).         * Key decisions made during implementation.         * Any deviations from the specification (MUST be explicitly noted and justified).         * Points requiring HITL input or review.         * References to related tasks or dependencies.     * **Crucially, when modifying code, you MUST reference the tracking document and explicitly state which task/sub-task the changes address. When starting a new task, you MUST refer back to previous relevant tasks and the overall specification to ensure contextual continuity.** **2.3. Phased Approach:** Follow a Plan -> Execute -> Test -> Track/Document cycle for each manageable chunk of work (sub-task or task):     * **Plan:** Reference the spec, break down the task (update tracking doc).     * **Execute:** Implement the code changes.     * **Test:** Perform automated tests AND prepare for/request HITL testing (see Section 5).     * **Track/Document:** Update the tracking document with status, changes, decisions, and test results. Only move to the next task once the current one is successfully tested and documented.  ## 3. Code Implementation & Standards  **3.1. Technology Stack:** Strictly adhere to the technology stack defined in the Detailed Technical Specification (Section 5.1): Next.js 15 (App Router), React 18+, TypeScript, Redux Toolkit (with RTK Query recommended), Supabase (Auth, DB, Storage, Edge Functions), Google Gemini API, TailwindCSS, MUI, Zod, Jest/Vitest, Playwright/Cypress, Vercel. **3.2. Materio Codebase Usage (Reference ONLY):**     * The `materio-mui-demo` codebase provided is for **REFERENCE PURPOSES ONLY**.     * You MUST **NOT** directly import files or components from the `materio-mui-demo` directory structure into the main application codebase.     * If you need to use a component, utility, style, configuration, or any code snippet from Materio, you **MUST COPY** the relevant file(s) into the appropriate location within the **main application's `src/` directory structure** (as defined in Section 2 of the Detailed Tech Spec), ensuring it integrates correctly with the project's setup (e.g., imports, theme context, state management). Modify the copied code as needed to fit the project's specific requirements (e.g., adapt state management, data fetching, authentication logic). **3.3. Coding Standards:**     * Follow established coding standards (ESLint, Prettier configs adapted from Materio).     * Write clean, readable, well-commented (especially for complex logic), and maintainable TypeScript code.     * Adhere to the file and directory structure defined in the Detailed Tech Spec (Section 2).     * Implement all user-facing text using the `next-international` i18n mechanism (Section 3.6 of Spec). Populate `src/data/dictionaries/vi.json`. **3.4. Database Interaction:**     * Interact with the Supabase database via the defined API routes (Section 4.2 of Spec).     * Adhere to the defined database schema (Section 5 of Spec).     * Implement and respect Row Level Security (RLS) policies. Backend admin routes must use the Supabase Admin SDK where necessary to bypass RLS for legitimate administrative actions.  ## 4. AI Capabilities & Limitations  **4.1. Primary AI Service:** Utilize the Google Gemini API (via `@google/generative-ai` SDK) for all AI-driven features (prompt/question generation, writing analysis, chat responses) as specified. **4.2. Prompt Engineering:** Focus on robust prompt engineering to achieve desired outcomes and ensure structured JSON responses where required by the specification (e.g., Writing Analysis, Adaptive Test Questions). Store editable default prompts as specified (`editable_prompts` table). **4.3. Structured Output:** When the specification requires structured JSON output from the AI, implement strict validation (using Zod schemas) of the received AI response before processing it. Handle malformed or unexpected responses gracefully (See Section 7 of Spec). **4.4. Image Generation Workflow (HITL):**     * You **MUST NOT** attempt to generate raster images (PNG, JPG) or complex vector illustrations (SVG beyond simple icons) yourself.     * When an image is required by the design or specification (e.g., avatars, illustrative content):         1.  Identify the need for the image within the current task.         2.  Generate a **detailed textual prompt** describing the required image. This prompt MUST include:             * **Format:** (e.g., PNG, JPG, SVG)             * **Dimensions/Aspect Ratio:** (e.g., 1:1, 16:9, specific pixel dimensions if critical)             * **Style:** (e.g., photorealistic, flat illustration, cartoonish, Material Design icon style)             * **Context:** Where the image will be used (e.g., user avatar, writing prompt illustration, section header).             * **Detailed Description:** Content, subject matter, mood, colors, key elements.         3.  Explicitly request **Human-in-the-Loop (HITL)** review in your task update/tracking document, providing the generated prompt.         4.  **Pause** the specific part of the task requiring the image until the HITL provides the image asset path.         5.  Once the HITL provides the image asset (e.g., path in `public/` or `src/assets/`), integrate it into the codebase. **4.5. Code Generation Focus:** Your primary role is implementing the application logic, UI, APIs, and database interactions based on the specification, leveraging your understanding of the tech stack and the Materio reference code (by copying and adapting). Use AI for assistance but ensure the final code adheres to all guidelines and passes tests.  ## 5. Testing & Quality Assurance  **5.1. Automated Testing (Mandatory):**     * You MUST implement automated tests (Unit, Integration, E2E) using the specified frameworks (Jest/Vitest, React Testing Library, Playwright/Cypress) as outlined in NFR-MAIN-004.     * Write tests concurrently with feature development.     * Aim for meaningful test coverage, focusing on critical logic, component interactions, API handlers, and key user flows.     * Ensure all tests pass before marking a task/sub-task as complete or ready for review. Tests MUST run successfully in the CI/CD pipeline. **5.2. Human-in-the-Loop (HITL) Testing:**     * Identify points in the development process (especially after completing significant tasks or features outlined in the tracking document) that require HITL review or testing.     * Explicitly request HITL review in the task tracking document, clearly stating what needs to be reviewed (e.g., UI/UX flow, specific feature functionality, AI output quality).     * Provide clear instructions or steps for the HITL tester.     * Do not proceed with dependent tasks until HITL feedback is received and addressed (update tracking doc accordingly). **5.3. Error Handling:** Implement the comprehensive error handling strategy defined in Section 7 of the Detailed Technical Specification. Ensure errors are logged appropriately and user feedback is clear and localized.  ## 6. Documentation & Tracking  **6.1. Task Tracking Documents:** As stated in Section 2.2, maintaining detailed, up-to-date Markdown tracking documents is **mandatory and critical** for project success, consistency, and context management. Reference these documents constantly during development. **6.2. Code Comments:** Add comments to explain complex algorithms, non-obvious logic, or the purpose of specific configurations. Use TSDoc/JSDoc format where appropriate. **6.3. README:** Update the main `README.md` if any changes affect the project setup, build, or run instructions.  ## 7. Communication & Reporting  **7.1. Progress Updates:** Your primary method of reporting progress is by meticulously updating the task tracking Markdown documents. **7.2. Blocking Issues:** If blocked (e.g., waiting for HITL feedback, unclear specification, technical hurdle), clearly mark the task as 'Blocked' in the tracking document, stating the reason. **7.3. Clarifications:** If the specification is ambiguous or requires clarification, clearly state the question or ambiguity in the tracking document and request HITL input. Do not make assumptions on critical points. **7.4. Deviations:** Any necessary deviation from the Detailed Technical Specification MUST be justified, documented in the tracking document, and ideally approved via HITL review *before* merging the related code.  ---  **By adhering to these rules and guidelines, you will ensure the development process is structured, consistent, context-aware, and aligned with the project goals and technical requirements.**"
}